/**
 * M√≥dulo de Processamento de V√≠deos para Entrevistas
 * 
 * Este m√≥dulo processa m√∫ltiplos v√≠deos criando:
 * 1. Abertura personalizada (5s) com logo, nome e processo
 * 2. Sequ√™ncia de entrevista com efeito Picture-in-Picture (PiP)
 * 3. Altern√¢ncia entre entrevistadora (Lisa) e candidato
 * 4. Concatena√ß√£o final em v√≠deo √∫nico HD (1280x720)
 * 
 * @author API Entrevista
 * @version 1.0.0
 */

const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const https = require('https');
const gerarAbertura = require('./gerarAbertura');

/**
 * Processa array de v√≠deos criando entrevista com abertura e efeitos PiP
 * 
 * @param {string[]} arquivos - Array com caminhos dos v√≠deos baixados
 * @param {Object} options - Op√ß√µes de processamento
 * @param {string} options.nome - Nome do candidato
 * @param {string} options.processo - Descri√ß√£o do processo seletivo
 * @returns {Promise<string>} Caminho do v√≠deo final processado
 * @throws {Error} Erro de valida√ß√£o ou processamento
 */

const processarVideos = async (arquivos, options = {}) => {
  const { nome, processo } = options;
  const startTime = Date.now();
  const processoId = `${processo || 'Processo'} - ${nome || 'Candidato'}`;
  
  // Valida√ß√£o de entrada
  if (!Array.isArray(arquivos)) {
    throw new Error(`[${processoId}] O par√¢metro "arquivos" deve ser um array`);
  }
  
  if (arquivos.length < 2) {
    throw new Error(`[${processoId}] √â necess√°rio pelo menos 2 v√≠deos para processar`);
  }
  
  // Valida√ß√£o de exist√™ncia dos arquivos
  console.log(`‚è±Ô∏è [${processoId}] Iniciando valida√ß√£o de ${arquivos.length} v√≠deos...`);
  for (let i = 0; i < arquivos.length; i++) {
    if (!fs.existsSync(arquivos[i])) {
      throw new Error(`[${processoId}] Arquivo n√£o encontrado: ${arquivos[i]}`);
    }
    
    // Verifica se o arquivo n√£o est√° vazio
    const stats = fs.statSync(arquivos[i]);
    if (stats.size === 0) {
      throw new Error(`[${processoId}] Arquivo vazio: ${arquivos[i]}`);
    }
  }

  const getElapsed = () => `${Math.round((Date.now() - startTime) / 1000)}s`;
  console.log(`‚úÖ [${processoId}] Valida√ß√£o conclu√≠da em ${getElapsed()}`);
  
  return new Promise((resolve, reject) => {
    const id = uuidv4(); // ID √∫nico para arquivos tempor√°rios
    const output = `tmp/output_${id}.mp4`; // Arquivo de sa√≠da final
    
    // Processa v√≠deos em modo entrevista din√¢mica (m√≠nimo 2 v√≠deos)
    if (arquivos.length >= 2) {
      
      /**
       * FLUXO PRINCIPAL DE PROCESSAMENTO
       * Executa a composi√ß√£o completa do v√≠deo final
       */
      (async () => {
        try {
          console.log(`üé¨ [${processoId}] Iniciando gera√ß√£o da abertura (${getElapsed()})...`);
          // 1. Gera abertura simplificada usando imagem base + v√≠deo circular
          const videoCandidato = arquivos.length >= 2 ? arquivos[1] : arquivos[0];
          const aberturaFile = await gerarAbertura({
            nome,
            outputId: id,
            videoCandidato: videoCandidato,
            processoId: processoId
          });
          console.log(`‚úÖ [${processoId}] Abertura gerada em ${getElapsed()}`);
          
          console.log(`üîÑ [${processoId}] Iniciando reencoding de ${arquivos.length} v√≠deos (${getElapsed()})...`);
          /**
           * 2. Reencode individual com sincroniza√ß√£o isolada para cada v√≠deo
           * Normaliza todos os v√≠deos para o mesmo formato:
           * - Resolu√ß√£o: 1280x720 (HD)
           * - Taxa de quadros: 30 FPS
           * - √Åudio: 48kHz est√©reo AAC
           * - Aspect ratio preservado com padding
           */
          const intermFiles = [];
          for (let i = 0; i < arquivos.length; i++) {
            console.log(`üé• [${processoId}] Reencoding v√≠deo ${i + 1}/${arquivos.length} (${getElapsed()})...`);
            const src = arquivos[i];
            const interm = `tmp/interm_${id}_${i + 1}.mp4`;
            
            // Reencoda cada v√≠deo individualmente com par√¢metros de sync rigorosos
            // IMPORTANTE: aspas duplas nos caminhos para evitar problemas com caracteres especiais
            const cmd = `ffmpeg -i "${src}" -vf "scale=1280:720:force_original_aspect_ratio=decrease,pad=1280:720:(ow-iw)/2:(oh-ih)/2,fps=30" -ar 48000 -ac 2 -c:v libx264 -c:a aac -strict experimental -shortest -r 30 -y "${interm}"`;
            try {
              await execAsync(cmd, { timeout: 300000 }); // 5 min timeout
              console.log(`‚úÖ [${processoId}] V√≠deo ${i + 1} reencoded em ${getElapsed()}`);
            } catch (e) {
              arquivos.forEach((f) => { try { fs.unlinkSync(f); } catch {} });
              const isTimeout = e.message && e.message.includes('timeout');
              const errorMsg = isTimeout 
                ? `[${processoId}] Timeout de 5 minutos no reencoding do v√≠deo ${i + 1}`
                : `[${processoId}] Erro ao reencodar v√≠deo ${i + 1}: ` + (e.stderr ? e.stderr.toString() : e.message);
              throw new Error(errorMsg);
            }
            intermFiles.push(interm);
          }
          console.log(`‚úÖ [${processoId}] Reencoding conclu√≠do em ${getElapsed()}`);
          
          console.log(`üé≠ [${processoId}] Iniciando gera√ß√£o de segmentos PiP (${getElapsed()})...`);
          /**
           * 3. Gera segmentos PiP apenas para os v√≠deos de entrevista
           * Implementa o efeito de altern√¢ncia din√¢mica:
           * - V√≠deo 1 (pergunta): foco principal, v√≠deo 2 em PiP
           * - V√≠deo 2 (resposta): foco principal, v√≠deo 1 em PiP  
           * - Labels din√¢micos: "Lisa" e nome do candidato
           * - PiP posicionado no canto inferior direito
           */
          const segs = [aberturaFile];
          for (let i = 0; i < intermFiles.length; i++) {
            const participante = i % 2 === 0 ? 'Lisa' : nome || 'Candidato';
            console.log(`üë• [${processoId}] Processando segmento ${i + 1}/${intermFiles.length} - ${participante} (${getElapsed()})...`);
            
            const main = path.resolve(intermFiles[i]);
            let pip = null;
            if (i + 1 < intermFiles.length) pip = path.resolve(intermFiles[i + 1]);
            const seg = `tmp/seg_${id}_${i + 1}.mp4`;
            let filter, cmd;
            let nomeLabel = '';
            
            /**
             * Sistema de labels din√¢micos para identifica√ß√£o dos participantes:
             * - Lisa sempre √© a entrevistadora (v√≠deos pares: 0, 2, 4...)  
             * - O candidato (nome do JSON) nos v√≠deos √≠mpares (1, 3, 5...)
             * Isso cria o fluxo pergunta-resposta natural da entrevista
             */
            if (i % 2 === 0) {
              nomeLabel = 'Lisa'; // Entrevistadora
            } else {
              nomeLabel = nome || 'Candidato'; // Nome do candidato do JSON
            }
            
            /**
             * Configura√ß√£o de texto overlay para identifica√ß√£o do participante
             * - Fonte Liberation Sans para Docker/Linux
             * - Texto branco com borda preta para legibilidade
             * - Posicionado no canto superior esquerdo (x=20, y=20)
             */
            let fontFile = '/Windows/Fonts/arial.ttf';
            if (!fs.existsSync(fontFile)) {
              fontFile = '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf'; // Linux
            }
            let drawtext = `drawtext=fontfile=${fontFile}:text='${nomeLabel}':fontcolor=white:fontsize=32:borderw=2:bordercolor=black:x=20:y=20:alpha=1`;
            let mainFilter = `[0:v]scale=1280:720,format=yuv420p[main];`;
            
            if (!pip) {
              /**
               * CEN√ÅRIO: √öltimo v√≠deo da sequ√™ncia
               * - Apenas o v√≠deo principal em destaque
               * - Sem PiP (Picture-in-Picture)
               * - Sincroniza√ß√£o isolada mantendo qualidade HD
               */
              filter = `${mainFilter}[main]${drawtext}[vout]`;
              cmd = `ffmpeg -i "${main}" -filter_complex "${filter}" -map "[vout]" -map 0:a -c:v libx264 -c:a aac -r 30 -shortest -y "${seg}"`;
            } else {
              /**
               * CEN√ÅRIO: V√≠deo com PiP (Picture-in-Picture) EST√ÅTICO
               * - V√≠deo principal em destaque (1280x720)
               * - PiP est√°tico (320x180) no canto inferior direito
               * - Lisa: imagem est√°tica pip-lisa.png
               * - Candidato: primeiro frame do pr√≥ximo v√≠deo como imagem est√°tica
               * - Sincroniza√ß√£o com √°udio principal
               */
              
              // Obt√©m dura√ß√£o do v√≠deo principal para sincroniza√ß√£o
              let dur = 0;
              try {
                const out = await execAsync(`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${main}"`, { timeout: 10000 });
                dur = parseFloat(out.stdout.toString().trim());
              } catch (e) {}
              
              // Determina se o PiP ser√° Lisa ou Candidato
              const proximoParticipante = (i + 1) % 2 === 0 ? 'Lisa' : nome || 'Candidato';
              let pipSource = '';
              let pipFilter = '';
              
              if (proximoParticipante === 'Lisa') {
                // Lisa: usa imagem est√°tica pip-lisa.png
                pipSource = 'pip-lisa.png';
                pipFilter = `[1:v]scale=320:180,format=yuv420p,loop=loop=-1:size=1:start=0[pip];`;
                cmd = `ffmpeg -i "${main}" -i "${pipSource}" -filter_complex "${mainFilter}${pipFilter}[main][pip]overlay=W-w-40:H-h-40[ovr];[ovr]${drawtext}[vout]" -map "[vout]" -map 0:a -c:v libx264 -c:a aac -t ${dur} -r 30 -shortest -y "${seg}"`;
              } else {
                // Candidato: extrai primeiro frame do pr√≥ximo v√≠deo
                const frameImage = `tmp/frame_${id}_${i + 1}.png`;
                try {
                  // Extrai primeiro frame do v√≠deo do candidato
                  await execAsync(`ffmpeg -i "${pip}" -vf "select=eq(n\\,0)" -vframes 1 -y "${frameImage}"`, { timeout: 30000 });
                  pipSource = frameImage;
                  pipFilter = `[1:v]scale=320:180,format=yuv420p,loop=loop=-1:size=1:start=0[pip];`;
                  cmd = `ffmpeg -i "${main}" -i "${frameImage}" -filter_complex "${mainFilter}${pipFilter}[main][pip]overlay=W-w-40:H-h-40[ovr];[ovr]${drawtext}[vout]" -map "[vout]" -map 0:a -c:v libx264 -c:a aac -t ${dur} -r 30 -shortest -y "${seg}"`;
                } catch (frameError) {
                  // Fallback: se falhar na extra√ß√£o do frame, usa primeiro segundo do v√≠deo
                  console.log(`‚ö†Ô∏è [${processoId}] Falha ao extrair frame do candidato, usando fallback`);
                  pipFilter = `[1:v]trim=end=1,setpts=PTS-STARTPTS,scale=320:180,format=yuv420p,loop=loop=-1:size=1:start=0[pip];`;
                  cmd = `ffmpeg -i "${main}" -i "${pip}" -filter_complex "${mainFilter}${pipFilter}[main][pip]overlay=W-w-40:H-h-40[ovr];[ovr]${drawtext}[vout]" -map "[vout]" -map 0:a -c:v libx264 -c:a aac -t ${dur} -r 30 -shortest -y "${seg}"`;
                }
              }
            }
            
            /**
             * Executa o comando FFmpeg para gerar o segmento
             * Em caso de erro, limpa arquivos tempor√°rios para evitar inconsist√™ncias
             */
            try {
              await execAsync(cmd, { timeout: 2400000 }); // 40 min timeout
              console.log(`‚úÖ [${processoId}] Segmento ${i + 1} - ${participante} conclu√≠do em ${getElapsed()}`);
            } catch (e) {
              intermFiles.forEach((f) => { try { fs.unlinkSync(f); } catch {} });
              segs.forEach((s) => { if (fs.existsSync(s)) try { fs.unlinkSync(s); } catch {} });
              // Limpeza dos frames tempor√°rios em caso de erro
              try {
                const tmpFiles = fs.readdirSync('tmp').filter(f => f.startsWith(`frame_${id}_`));
                tmpFiles.forEach(f => { try { fs.unlinkSync(`tmp/${f}`); } catch {} });
              } catch {}
              // Mensagem de erro mais detalhada para timeout
              const isTimeout = e.message && e.message.includes('timeout');
              const errorMsg = isTimeout 
                ? `[${processoId}] Timeout de 40 minutos excedido no processamento do segmento ${i + 1} (${participante}). V√≠deo muito longo ou processamento complexo.`
                : `[${processoId}] Erro ao gerar segmento PiP ${i + 1} (${participante}): ` + (e.stderr ? e.stderr.toString() : e.message);
              throw new Error(errorMsg);
            }
            segs.push(seg);
          }
          
          console.log(`‚úÖ [${processoId}] Segmentos PiP conclu√≠dos em ${getElapsed()}`);
          
          console.log(`üîó [${processoId}] Iniciando concatena√ß√£o final (${getElapsed()})...`);
          /**
           * 4. CONCATENA√á√ÉO FINAL
           * Junta todos os segmentos em um v√≠deo √∫nico:
           * - Abertura (5s) + Segmentos de entrevista com PiP
           * - Usa concatena√ß√£o simples com copy streams para evitar reprocessamento
           * - Mant√©m qualidade HD e sincroniza√ß√£o de √°udio
           */
          const listFile = `tmp/lista_${id}.txt`;
          const lista = segs.map(f => `file '${path.resolve(f).replace(/\\/g, '/')}'`).join('\n');
          fs.writeFileSync(listFile, lista);
          const absListFile = path.resolve(listFile);
          
          /**
           * Concatena√ß√£o final COM OTIMIZA√á√ÉO para WhatsApp
           * - Aplica compress√£o otimizada para compartilhamento
           * - Mant√©m qualidade visual aceit√°vel
           * - Reduz tamanho final do arquivo
           * - Corta 1 segundo do in√≠cio para sincroniza√ß√£o
           */
          const concatCmd = `ffmpeg -f concat -safe 0 -i "${absListFile}" -ss 1 -c:v libx264 -preset fast -crf 25 -maxrate 2000k -bufsize 4000k -c:a aac -b:a 128k -movflags +faststart -y "${output}"`;
          try {
            await execAsync(concatCmd, { timeout: 600000 }); // 10 min timeout
            console.log(`‚úÖ [${processoId}] Concatena√ß√£o conclu√≠da em ${getElapsed()}`);
          } catch (e) {
            // Limpeza em caso de erro na concatena√ß√£o
            intermFiles.forEach((f) => { try { fs.unlinkSync(f); } catch {} });
            segs.forEach((s) => { if (fs.existsSync(s)) try { fs.unlinkSync(s); } catch {} });
            try { fs.unlinkSync(listFile); } catch {}
            arquivos.forEach((f) => { try { fs.unlinkSync(f); } catch {} });
            // Limpeza dos frames tempor√°rios em caso de erro na concatena√ß√£o
            try {
              const tmpFiles = fs.readdirSync('tmp').filter(f => f.startsWith(`frame_${id}_`));
              tmpFiles.forEach(f => { try { fs.unlinkSync(`tmp/${f}`); } catch {} });
            } catch {}
            // Mensagem de erro melhorada para concatena√ß√£o
            const isTimeout = e.message && e.message.includes('timeout');
            const errorMsg = isTimeout 
              ? `[${processoId}] Timeout de 10 minutos excedido na concatena√ß√£o final. Muitos segmentos ou arquivo muito grande.`
              : `[${processoId}] Erro ao concatenar segmentos: ` + (e.stderr ? e.stderr.toString() : e.message);
            throw new Error(errorMsg);
          }
          
          console.log(`üßπ [${processoId}] Iniciando limpeza de arquivos tempor√°rios (${getElapsed()})...`);
          /**
           * LIMPEZA FINAL
           * Remove todos os arquivos tempor√°rios ap√≥s processamento bem-sucedido
           * Mant√©m apenas o arquivo final de sa√≠da
           */
          intermFiles.forEach((f) => { try { fs.unlinkSync(f); } catch {} });
          segs.forEach((s) => { if (fs.existsSync(s)) try { fs.unlinkSync(s); } catch {} });
          try { fs.unlinkSync(listFile); } catch {}
          arquivos.forEach((f) => { try { fs.unlinkSync(f); } catch {} });
          
          // Limpeza dos frames tempor√°rios extra√≠dos para PiP est√°tico
          try {
            const tmpFiles = fs.readdirSync('tmp').filter(f => f.startsWith(`frame_${id}_`));
            tmpFiles.forEach(f => { try { fs.unlinkSync(`tmp/${f}`); } catch {} });
          } catch {}
          
          const totalTime = Math.round((Date.now() - startTime) / 1000);
          console.log(`üéâ [${processoId}] Processamento conclu√≠do com sucesso! Tempo total: ${totalTime}s`);
          console.log(`üìÅ [${processoId}] V√≠deo final: ${output}`);
          
          resolve(output);
        } catch (error) {
          reject(error);
        }
      })();
      return;
    }
  });
};

/**
 * ARQUIVO CONCLU√çDO - DOCUMENTA√á√ÉO COMPLETA
 * 
 * Este m√≥dulo implementa um sistema completo de processamento de v√≠deo para entrevistas:
 * 
 * FUNCIONALIDADES PRINCIPAIS:
 * - Gera√ß√£o de abertura profissional (5s) com logo e informa√ß√µes do candidato
 * - Processamento de v√≠deos em HD 1280x720 com sincroniza√ß√£o perfeita de √°udio
 * - Efeito Picture-in-Picture (PiP) din√¢mico alternando foco entre participantes
 * - Labels din√¢micos identificando "Lisa" (entrevistadora) e o candidato
 * - Concatena√ß√£o otimizada preservando qualidade original
 * 
 * FLUXO DE PROCESSAMENTO:
 * 1. Valida√ß√£o de par√¢metros e cria√ß√£o de diret√≥rio tempor√°rio
 * 2. Gera√ß√£o da abertura com textos e logo centralizados
 * 3. Normaliza√ß√£o individual de cada v√≠deo para formato HD padronizado
 * 4. Cria√ß√£o de segmentos PiP com altern√¢ncia autom√°tica de foco
 * 5. Concatena√ß√£o final usando stream copy para efici√™ncia m√°xima
 * 6. Limpeza autom√°tica de arquivos tempor√°rios
 * 
 * OTIMIZA√á√ïES IMPLEMENTADAS:
 * - Escape adequado de comandos shell para seguran√ßa
 * - Gest√£o inteligente de mem√≥ria com limpeza progressiva
 * - Sincroniza√ß√£o rigorosa de √°udio/v√≠deo (48kHz, AAC)
 * - Processamento eficiente evitando recodifica√ß√µes desnecess√°rias
 * - **ASYNC/AWAIT**: Todos os execSync substitu√≠dos por execAsync com timeouts
 * 
 * COMPATIBILIDADE:
 * - Windows (fonte Arial padr√£o)
 * - Linux (fallback para fonte Arial do sistema)
 * - Suporte a caracteres especiais em nomes e processos
 * - Docker ready com todas as depend√™ncias inclu√≠das
 * - **Event Loop Friendly**: N√£o bloqueia mais a API durante processamento
 */

module.exports = processarVideos;